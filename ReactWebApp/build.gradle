import org.apache.tools.ant.taskdefs.condition.Os
plugins {
    id 'war'
    id 'eclipse-wtp'
    id 'java-library'
    id "com.moowork.node" version "1.2.0"
    id 'org.gretty' version '2.2.0'
}
repositories {
    jcenter()
}
targetCompatibility = '8'
sourceCompatibility = '8'
dependencies {
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
	testCompile 'org.mockito:mockito-core:2.24.5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.0'	// needs eclipse 4.10
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
}
test {
    useJUnitPlatform {
        includeTags 'fast'
        excludeTags 'slow'
    }
}
war {
	from ('build/js', {
            into 'js'
        })
	webInf { from 'src/additionalWebInf' }
}
def nodeVersion = '8.0.0'
ext.configureNode =  { -> 
    node {
      version = nodeVersion
      download = true
      nodeModulesDir = file("${projectDir}")
    }
}
task npmInstallation(type: NpmTask) {
    configureNode()
    inputs.file('package.json')
    outputs.upToDateWhen { file('node_modules').exists() }
    npmCommand = ['install']
}
task webpack(type: Exec, dependsOn: 'npmInstallation') { 
	group = "node"
	description = 'runs custom webpack command, creates node_modules if required'
	inputs.file("package-lock.json").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.file("webpack.config.js").withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("src/main/webapp/").withPathSensitivity(PathSensitivity.RELATIVE)
	outputs.dir("$buildDir/js")
	outputs.cacheIf { true }
	commandLine "$projectDir/node_modules/.bin/" + (Os.isFamily(Os.FAMILY_WINDOWS) ? "webpack.cmd" : "webpack")
}
war.dependsOn webpack
eclipse {
	wtp {
		component {
			resource sourcePath: "build/js", deployPath: "/js"
		}
	}
}